require(graphics)
library(tictoc)
library(EMVS)
library(spikeslab)
library(varbvs)
library(selectiveInference)
require(MASS)
library(SSLASSO)
library(horseshoe)
library(lars)
library(ebreg)
# Experiment 5:
n<-200
p<-n*4
s<-40
value=runif(s,-10,10)
theta<-rep(0,p)
tau<-0.2
theta[1:s]<- value
sigma<-5
lambda_number<-400 # number of cycles
repeat_number<-100
# Generating the data and the design matrix:
eps   =  rnorm(n,0,1)
X<-matrix(rnorm(n*p, mean=0,sd=tau),nrow=n,ncol=p)
Y     =  X %*% theta +eps*sigma
XTX= t(X) %*% X
YTX<-t(X)%*%Y
mu0<-solve(XTX+diag(p))%*%YTX
help<-varbvs(X=X, Z=NULL,y=Y, family = "gaussian",  mu=mu0 ,verbose = TRUE, tol = 1e-4, maxiter = 10000)
thetaM<-help$beta
pip<-help$pip
lambda1<-1
lambda0<-seq(lambda1, 25,length=25)
#obj<-SSLASSO(X, Y, penalty="separable",
#               variance = "unknown",
#             lambda1 = lambda1, lambda0 = lambda0,theta=0.5)
obj<-SSLASSO(X, Y, variance = "unknown", lambda1 = lambda1, lambda0 = lambda0)
plot(ojb)
plot(obj)
#obj<-SSLASSO(X, Y, penalty="separable",
#               variance = "unknown",
#             lambda1 = lambda1, lambda0 = lambda0,theta=0.5)
obj<-SSLASSO(X, Y, variance = "fixed", lambda1 = lambda1, lambda0 = lambda0)
plot(obj)
j = 25
sqrt(sum((theta-thetaSSL[,j])^2))
thetaSSL<-obj$beta
pipSSL<-obj$select
sqrt(sum((theta-thetaSSL[,j])^2))
sqrt(sum((theta-t(thetaM))^2))
source('~/Dropbox/phd/research/published/Unknown_variance/Package/Devel/SSLASSO/R/SSLASSO.R', echo=TRUE)
#obj<-SSLASSO(X, Y, penalty="separable",
#               variance = "unknown",
#             lambda1 = lambda1, lambda0 = lambda0,theta=0.5)
obj<-SSLASSO(X, Y, variance = "fixed", lambda1 = lambda1, lambda0 = lambda0)
plot(obj)
obj$sigmas
length(obj$model)
#obj<-SSLASSO(X, Y, penalty="separable",
#               variance = "unknown",
#             lambda1 = lambda1, lambda0 = lambda0,theta=0.5)
obj<-SSLASSO(X, Y, variance = "unknown", lambda1 = lambda1, lambda0 = lambda0)
plot(obj)
lambda0<-seq(lambda1, 100,length=100)
#obj<-SSLASSO(X, Y, penalty="separable",
#               variance = "unknown",
#             lambda1 = lambda1, lambda0 = lambda0,theta=0.5)
obj<-SSLASSO(X, Y, variance = "unknown", lambda1 = lambda1, lambda0 = lambda0)
plot(obj)
length(obj$select)
length(obj$model)
obj$sigmas
# get initial value for sigma
df <- 3
yy = y
yy = Y
sigest <- sd(yy)
sigquant <- 0.99
sigest <- sd(yy)
qchi <- qchisq(1 - sigquant, df)
ncp <- sigest^2 * qchi / df
min_sigma2 <- sigest^2 / n
min_sigma2
sqrt(df * ncp / (df + 2))
sqrt(df * ncp / (df - 2))
df <- 3
sigquant <- 0.9
sigest <- sd(yy)
qchi <- qchisq(1 - sigquant, df)
ncp <- sigest^2 * qchi / df
min_sigma2 <- sigest^2 / n
sqrt(df * ncp / (df + 2))
sqrt(df * ncp / (df - 2))
sigma
# get initial value for sigma
df <- 3
sigquant <- 0.95
sigest <- sd(yy)
qchi <- qchisq(1 - sigquant, df)
ncp <- sigest^2 * qchi / df
min_sigma2 <- sigest^2 / n
sqrt(df * ncp / (df + 2))
sqrt(df * ncp / (df - 2))
source('~/Dropbox/phd/research/published/Unknown_variance/Package/Devel/SSLASSO/R/SSLASSO.R', echo=TRUE)
lambda1<-1
lambda0<-seq(lambda1, 100,length=100)
#obj<-SSLASSO(X, Y, penalty="separable",
#               variance = "unknown",
#             lambda1 = lambda1, lambda0 = lambda0,theta=0.5)
obj<-SSLASSO(X, Y, variance = "unknown", lambda1 = lambda1, lambda0 = lambda0)
plot(obj)
eps   =  rnorm(n,0,1)
X<-matrix(rnorm(n*p, mean=0,sd=tau),nrow=n,ncol=p)
Y     =  X %*% theta +eps*sigma
XTX= t(X) %*% X
YTX<-t(X)%*%Y
mu0<-solve(XTX+diag(p))%*%YTX
help<-varbvs(X=X, Z=NULL,y=Y, family = "gaussian",  mu=mu0 ,verbose = TRUE, tol = 1e-4, maxiter = 10000)
thetaM<-help$beta
pip<-help$pip
lambda1<-1
lambda0<-seq(lambda1, 100,length=100)
#obj<-SSLASSO(X, Y, penalty="separable",
#               variance = "unknown",
#             lambda1 = lambda1, lambda0 = lambda0,theta=0.5)
obj<-SSLASSO(X, Y, variance = "unknown", lambda1 = lambda1, lambda0 = lambda0)
plot(obj)
18887/60
18887/(60 * 60)
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_1")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_1")
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
# pdf("figures/X_true.pdf", width = 2, height = 4)
#
# plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
#
# pdf("figures/B_true.pdf", width = 2, height = 4)
#
# plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
## SSLB
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1000,
10000, 100000, 1000000, 10000000)
lambda0_tildes <- c(1, rep(5, length(lambda0s)-1))
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0,
varimax = 0))
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
result_SSLB$consensus
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_1")
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
# pdf("figures/X_true.pdf", width = 2, height = 4)
#
# plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
#
# pdf("figures/B_true.pdf", width = 2, height = 4)
#
# plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
## SSLB
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1000,
10000, 100000, 1000000, 10000000)
lambda0_tildes <- c(1, rep(5, length(lambda0s)-1))
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0,
varimax = 1))
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
result_SSLB$consensus
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_2")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
# pdf("figures/X_true.pdf", width = 2, height = 4)
#
# plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
#
# pdf("figures/B_true.pdf", width = 2, height = 4)
#
# plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
## SSLB
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1e3, 1e4, 1e5, 1e6, 1e7)
lambda0_tildes <- c(1, rep(5, length(lambda0s)-1))
tic = proc.time()
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0, varimax = 0))
toc = proc.time() - tic
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
result_SSLB$consensus
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
# pdf("figures/X_true.pdf", width = 2, height = 4)
#
# plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
#
# pdf("figures/B_true.pdf", width = 2, height = 4)
#
# plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
## SSLB
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1e3, 1e4, 1e5, 1e6, 1e7)
lambda0_tildes <- c(1, rep(5, length(lambda0s)-1))
tic = proc.time()
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0, varimax = 1))
toc = proc.time() - tic
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
result_SSLB$consensus
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_3")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 3
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
# pdf("figures/X_true.pdf", width = 2, height = 4)
#
# plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
#
# pdf("figures/B_true.pdf", width = 2, height = 4)
#
# plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
## SSLB
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1000, 10000, 100000, 1000000, 10000000)
lambda0_tildes <- c(1, rep(5, length(lambda0s)-1))
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 1, varimax = 1))
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
result_SSLB$consensus
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_4")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
#
# pdf("figures/X_true.pdf", width = 2, height = 4)
#
# plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
#
# pdf("figures/B_true.pdf", width = 2, height = 4)
#
# plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
## SSLB
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1000, 10000, 100000, 1000000, 10000000)
lambda0_tildes <- c(1, rep(5, length(lambda0s)-1))
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0, varimax = 1))
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
test = 1
test
test[1]
result_SSLB$consensus
plot_matrix(X_SSLB)
plot_matrix(B_SSLB)
SSLB
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_2")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
# pdf("figures/X_true.pdf", width = 2, height = 4)
#
# plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
#
# pdf("figures/B_true.pdf", width = 2, height = 4)
#
# plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
#
# dev.off()
## SSLB
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1e3, 1e4, 1e5, 1e6, 1e7)
lambda0_tildes <- c(1, rep(5, length(lambda0s)-1))
tic = proc.time()
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0, varimax = 1))
toc = proc.time() - tic
toc/60
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
result_SSLB$consensus
plot_matrix(X_SSLB)
plot_matrix(B_SSLB)
B_SSLB[B_SSLB!=0]=1
plot_matrix(B_SSLB)
plot_matrix(X_SSLB)
X_SSLB[X_SSLB!=0]=1
plot_matrix(X_SSLB)
