}
n_groups <- max(groups)
label_data <- data.frame(x = rep(-5, n_groups),
y = c(2800, 2500, 1800, 1000, 520, 370, 200, 70, 10),
labels = group_names)
group_plot <- plot_matrix(groups[ord], title = "") +
scale_fill_gradientn(colors = brewer.paired(n_groups)) +
theme(plot.margin=unit(c(5.5, 5.5, 5.5, 45),"pt")) +
geom_text(data = label_data, aes(x = x, y = y, label = labels)) +
coord_cartesian(clip = 'off') +
theme(panel.border =element_blank())
subclass_cols <- numeric(max(subclasses))
subclass_cols[-c(no_cat)] <- brewer.paired(47)
subclass_cols[no_cat] <- "black"
subclass_plot <- plot_matrix(subclasses[ord], title = "") +
scale_fill_gradientn(colors = subclass_cols) +
theme(panel.border =element_blank())
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder]))
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder]), nrow = 1)
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder]), nrow = 1, width=c(3, 20))
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder]), nrow = 1, widths=c(3, 20))
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 20))
groups
sum(groups ==1)
which(apply(X_ISA[1:290,], 2, function(x) any(x!=0)))
paste(which(apply(X_ISA[1:290,], 2, function(x) any(x!=0))), sep = ",")
paste(which(apply(X_ISA[1:290,], 2, function(x) any(x!=0))), sep = ,)
paste(which(apply(X_ISA[1:290,], 2, function(x) any(x!=0))), collapse = ",")
reorder = union(c(2,3,4,6,10,11,13,19,20,22,25,29,30,31,
37,40,43,46,48,51,52,53,58,62,63,64,66,
68,70,72,73,74,79,83,85,86,87,89,90,93,
94,95,96,97,98,100,101,102,103,105,106,107),
1:K_ISA)
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 20))
apply(X_ISA[1:290,], 2, function(x) sum(x!=0))
paste(which(apply(X_ISA[1:290,], 2, function(x) sum(x!=0)) > 5), sep = ,)
apply(X_ISA[1:290,], 2, function(x) sum(x!=0))
apply(X_ISA[1:290,], 2, function(x) sum(x!=0)) > 5
paste(which(apply(X_ISA[1:290,], 2, function(x) sum(x!=0)) > 5), collapse = ",")
reorder = union(c(2,4,6,10,11,29,31,37,40,43,46,48,51,52,53,58,62,64,66,68,70,72,74,79,85,86,90,93,100,103,105),
1:K_ISA)
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 20))
paste(which(apply(X_ISA[which(groups == 2),], 2, function(x) sum(x!=0)) > 5), collapse = ",")
paste(which(apply(X_ISA[which(groups == 1),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 2),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 3),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 4),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 5),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 6),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 7),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 8),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
paste(which(apply(X_ISA[which(groups == 9),], 2, function(x) sum(x!=0)) > 3), collapse = ",")
reorder = c()
for (i in 1:length(groups)) {
reorder = c(reorder, which(apply(X_ISA[which(groups == i),], 2, function(x) sum(x!=0)) > 3))
}
reorder
unique(reorder)
reorder = unique(reorder)
grid.arrange(group_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 20))
reorder = c()
for (i in 1:length(groups)) {
reorder = c(reorder, which(apply(X_ISA[which(groups == i),], 2, function(x) sum(x!=0)) > 5))
}
reorder = unique(reorder)
grid.arrange(group_plot, subclass_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 1, 25))
reorder = c()
for (i in 1:length(groups)) {
reorder = c(reorder, which(apply(X_ISA[which(groups == i),], 2, function(x) sum(x!=0)) > 8))
}
reorder = unique(reorder)
grid.arrange(group_plot, subclass_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 1, 25))
reorder = c()
for (i in 1:length(groups)) {
reorder = c(reorder, which(apply(X_ISA[which(groups == i),], 2, function(x) sum(x!=0)) > 10))
}
reorder = unique(reorder)
grid.arrange(group_plot, subclass_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 1, 25))
length(reorder)
dim(X_ISA)
reorder = union(reorder, 1:K_ISA)
reorder
length(reorder)
grid.arrange(group_plot, subclass_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 1, 25))
apply(X_ISA[which(groups == 5)], 2, function(x) sum(x!=0))
which(groups == 5)
apply(X_ISA[which(groups == 5),], 2, function(x) sum(x!=0))
which.max(apply(X_ISA[which(groups == 5),], 2, function(x) sum(x!=0)))
reorder
sum(X_ISA[which(groups == 4), 19])
sum(X_ISA[which(groups == 4), 19]!=0)
reorder = c()
for (i in 1:length(groups)) {
reorder = c(reorder, which(apply(X_ISA[which(groups == i),], 2, function(x) sum(x!=0)) > 11))
}
reorder = union(reorder, 1:K_ISA)
grid.arrange(group_plot, subclass_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 1, 25))
pdf(file = "figures/zeisel_ISA.pdf", width = 10, height = 8, pointsize = 16)
grid.arrange(group_plot, subclass_plot, plot_matrix(X_ISA[,reorder], title = ""), nrow = 1, widths=c(5, 1, 25))
dev.off()
cite("isa2")
cite(isa)
cite(isa2)
citation("biclust")
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_2")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
out = biclust(exp(Y), method = BCSpectral())
X_spectral = as.matrix(apply(out@RowxNumber, 2, as.numeric))
B_spectral = as.matrix(apply(out@NumberxCol, 1, as.numeric))
K_spectral = ncol(X_spectral)
result_spectral = analyze_bic(X_spectral, B_spectral, X, B)
X_spectral = result_spectral$X_found
B_spectral = result_spectral$B_found
plot_matrix(X_spectral)
plot_matrix(X_spectral, title = "X (Spectral, K = 1)", xlab = "K", ylab = "N")
plot_matrix(B_spectral, title = "B (Spectral, K = 1)", xlab = "K", ylab = "G")
pdf("figures/X_spectral.pdf", width = 2, height = 4)
plot_matrix(X_spectral, title = "X (Spectral, K = 2)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_spectral.pdf", width = 2, height = 4)
plot_matrix(B_spectral, title = "B (Spectral, K = 2)", xlab = "K", ylab = "G")
dev.off()
plaid_out = capture.output(out <- biclust(Y, method = BCPlaid(), max.layers = K))
X_plaid = as.matrix(apply(out@RowxNumber, 2, as.numeric))
B_plaid = as.matrix(apply(out@NumberxCol, 1, as.numeric))
K_plaid = ncol(X_plaid)
if (is.null(K_plaid)) {
K_plaid = 0
}
result_plaid = analyze_bic(X_plaid, B_plaid, X, B)
X_plaid = result_plaid$X_found
B_plaid = result_plaid$B_found
plot_matrix(X_plaid, title = "X (Plaid, K = 15)", xlab = "K", ylab = "N")
plot_matrix(B_plaid, title = "B (Plaid, K = 15)", xlab = "K", ylab = "G")
dim(X_plaid)
pdf("figures/X_plaid.pdf", width = 2, height = 4)
plot_matrix(X_plaid, title = "X (Plaid, K = 15)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_plaid.pdf", width = 2, height = 4)
plot_matrix(B_plaid, title = "B (Plaid, K = 15)", xlab = "K", ylab = "G")
dev.off()
out = isa(Y)
X_ISA = out$rows
B_ISA = out$columns
K_ISA = ncol(X_ISA)
result_ISA = analyze_bic(X_ISA, B_ISA, X, B)
X_ISA = result_ISA$X_found
B_ISA = result_ISA$B_found
dim(X_ISA)
pdf("figures/X_ISA.pdf", width = 2, height = 4)
plot_matrix(X_ISA, title = "X (ISA, K = 362)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_ISA.pdf", width = 2, height = 4)
plot_matrix(B_ISA, title = "B (ISA, K = 362)", xlab = "K", ylab = "G")
dev.off()
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_1")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
out = isa(Y)
X_ISA = out$rows
B_ISA = out$columns
K_ISA = ncol(X_ISA)
result_ISA = analyze_bic(X_ISA, B_ISA, X, B)
X_ISA = result_ISA$X_found
B_ISA = result_ISA$B_found
dim(X_ISA)
pdf("figures/X_ISA.pdf", width = 2, height = 4)
plot_matrix(X_ISA, title = "X (ISA, K = 51)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_ISA.pdf", width = 2, height = 4)
plot_matrix(B_ISA, title = "B (ISA, K = 51)", xlab = "K", ylab = "G")
dev.off()
out = biclust(exp(Y), method = BCSpectral())
X_spectral = as.matrix(apply(out@RowxNumber, 2, as.numeric))
B_spectral = as.matrix(apply(out@NumberxCol, 1, as.numeric))
K_spectral = ncol(X_spectral)
result_spectral = analyze_bic(X_spectral, B_spectral, X, B)
X_spectral = result_spectral$X_found
B_spectral = result_spectral$B_found
plot_matrix(X_spectral, title = "X (Spectral, K = 15)", xlab = "K", ylab = "N")
dim(X_spectral)
plot_matrix(B_spectral, title = "B (Spectral, K = 12)", xlab = "K", ylab = "G")
pdf("figures/X_spectral.pdf", width = 2, height = 4)
plot_matrix(X_spectral, title = "X (Spectral, K = 12)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_spectral.pdf", width = 2, height = 4)
plot_matrix(B_spectral, title = "B (Spectral, K = 12)", xlab = "K", ylab = "G")
dev.off()
plaid_out = capture.output(out <- biclust(Y, method = BCPlaid(), max.layers = K))
X_plaid = as.matrix(apply(out@RowxNumber, 2, as.numeric))
B_plaid = as.matrix(apply(out@NumberxCol, 1, as.numeric))
K_plaid = ncol(X_plaid)
if (is.null(K_plaid)) {
K_plaid = 0
}
result_plaid = analyze_bic(X_plaid, B_plaid, X, B)
X_plaid = result_plaid$X_found
B_plaid = result_plaid$B_found
plot_matrix(X_plaid, title = "X (Plaid, K = 1)", xlab = "K", ylab = "N")
dim(X_plaid)
pdf("figures/X_plaid.pdf", width = 2, height = 4)
plot_matrix(X_plaid, title = "X (Plaid, K = 2)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_plaid.pdf", width = 2, height = 4)
plot_matrix(B_plaid, title = "B (Plaid, K = 2)", xlab = "K", ylab = "G")
dev.off()
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_3")
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 3
out = isa(Y)
X_ISA = out$rows
B_ISA = out$columns
K_ISA = ncol(X_ISA)
result_ISA = analyze_bic(X_ISA, B_ISA, X, B)
X_ISA = result_ISA$X_found
B_ISA = result_ISA$B_found
dim(X_ISA)
pdf("figures/X_ISA.pdf", width = 2, height = 4)
plot_matrix(X_ISA, title = "X (ISA, K = 51)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_ISA.pdf", width = 2, height = 4)
plot_matrix(B_ISA, title = "B (ISA, K = 51)", xlab = "K", ylab = "G")
dev.off()
library(fabia)
library(SSLB)
library(mvtnorm)
library(isa2)
library(biclust)
# Requires these functions
source("../SSLB_functions.R")
set.seed(123456789)
N <- 300 # number of samples
G <- 1000 # number of features
K <- 15 # number of biclusters
K_init <- 30 # number of initial biclusters
r = 1
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
out = isa(Y)
X_ISA = out$rows
B_ISA = out$columns
K_ISA = ncol(X_ISA)
result_ISA = analyze_bic(X_ISA, B_ISA, X, B)
X_ISA = result_ISA$X_found
B_ISA = result_ISA$B_found
dim(X_ISA)
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_4")
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
out = isa(Y)
X_ISA = out$rows
B_ISA = out$columns
K_ISA = ncol(X_ISA)
result_ISA = analyze_bic(X_ISA, B_ISA, X, B)
X_ISA = result_ISA$X_found
B_ISA = result_ISA$B_found
dim(X_ISA)
pdf("figures/X_ISA.pdf", width = 2, height = 4)
plot_matrix(X_ISA, title = "X (ISA, K = 131)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_ISA.pdf", width = 2, height = 4)
plot_matrix(B_ISA, title = "B (ISA, K = 131)", xlab = "K", ylab = "G")
dev.off()
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1000, 10000, 100000, 1000000, 10000000)
lambda0_tildes <- seq(1, 15, length.out = length(lambda0s))
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0, EPSILON = 0.01))
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- ncol(B_SSLB)
result_SSLB = analyze_bic(X_SSLB, B_SSLB, X, B)
X_SSLB = result_SSLB$X_found
B_SSLB = result_SSLB$B_found
result_SSLB$consensus
plot_matrix(X_SSLB, title = "X (SSLB, K = 14)", xlab = "K", ylab = "N")
plot_matrix(B_SSLB, title = "B (SSLB, K = 14)", xlab = "K", ylab = "G")
plot_matrix(X, title = "True X (K = 15)", xlab = "K", ylab = "N")
sum(B_SSLB[,1] == B[,1])
test = B[,1] == 1
test1 = B_SSLB[,1] ==1
sum(test == test1)/sum(test)
sum(test+test1 == 2)/sum(test)
test
plot_matrix(B, title = "True B (K = 15)", xlab = "K", ylab = "N")
test = B[,2] == 1
sum(test+test1 == 2)/sum(test)
sum(test)
sum(test1)
plot_matrix(B_SSLB)
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/sim_study_3")
r = 3
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# READ DATA
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
out = isa(Y)
X_ISA = out$rows
B_ISA = out$columns
K_ISA = ncol(X_ISA)
result_ISA = analyze_bic(X_ISA, B_ISA, X, B)
X_ISA = result_ISA$X_found
B_ISA = result_ISA$B_found
plot_matrix(X_ISA, title = "X (ISA, K = 51)", xlab = "K", ylab = "N")
dim(X_ISA)
pdf("figures/X_ISA.pdf", width = 2, height = 4)
plot_matrix(X_ISA, title = "X (ISA, K = 26)", xlab = "K", ylab = "N")
dev.off()
pdf("figures/B_ISA.pdf", width = 2, height = 4)
plot_matrix(B_ISA, title = "B (ISA, K = 26)", xlab = "K", ylab = "G")
dev.off()
Y
plot_matrix(Y)
setwd("~/Dropbox/phd/research/Biclustering/Examples/supplementary_code/breastCancerNKI")
source('../SSLB_functions.R', echo=TRUE)
library(SSLB)
library(fabia)
library(isa2)
library(biclust)
bicmix_dir <- "../../../Code/BicMix/BicMix"
# -------------------------------------
# Read in data
#--------------------------------------
option = c("raw", "quantile", "norm")
i = 1
Y <- read.table(paste("data/Y_", option[i], ".txt", sep = ""), stringsAsFactors = F)
Y <- as.matrix(Y)
N <- nrow(Y)
G <- ncol(Y)
K_init <- 50
# Run SSLB ----------------------------
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)
lambda0_tildes <- lambda0s
time <- system.time(out <- SSLB(Y, K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1/N,
a = 1/(G * K_init),
a_tilde = 1/(N * K_init),
d = 0,
IBP = 0, EPSILON = 0.01))
out$path$lambda0_tildes
plot_matrix(out$X)
out$K
X_SSLB = out$X
X_SSLB[X_SSLB > 5] = 5
X_SSLB[X_SSLB < -5] = -5
load("data/gene_info.RData")
load("data/sample_info.RData")
gene_info[] <- lapply(gene_info, as.character)
er <- sample_info$er
er[er == 0] <- -1
er_order <- order(er)
er_factor <- factor(er)
plot_matrix(X_SSLB[er_order,])
# which biclusters contain ESR1
B_SSLB[which(gene_info$HUGO.gene.symbol == "ESR1"), ]
B_SSLB <- out$B
# significant difference
p_vals <- numeric(K_SSLB)
for (k in 1:K_SSLB) {
p_vals[k] <- wilcox.test(X_SSLB[, k] ~ er_factor)$p.value
}
K_SSLB <- out$K
# significant difference
p_vals <- numeric(K_SSLB)
for (k in 1:K_SSLB) {
p_vals[k] <- wilcox.test(X_SSLB[, k] ~ er_factor)$p.value
}
er_k <- which.min(p_vals)
p_vals < 0.01/K_SSLB
B_SSLB = B_SSLB[, order(p_vals)]
X_SSLB = X_SSLB[, order(p_vals)]
plot_matrix(X_SSLB[er_order,])
# which biclusters contain ESR1
B_SSLB[which(gene_info$HUGO.gene.symbol == "ESR1"), ]
# HER2 markers
B_SSLB[which(gene_info$HUGO.gene.symbol == "ERBB2"), ]
X_SSLB = X_SSLB[, union(c(1, 2, 8, 5), 1:K_SSLB)]
plot_matrix(X_SSLB[er_order,])
B_SSLB = B_SSLB[, union(c(1, 2, 8, 5), 1:K_SSLB)]
# HER2 markers
B_SSLB[which(gene_info$HUGO.gene.symbol == "ERBB2"), ]
# which biclusters contain ESR1
B_SSLB[which(gene_info$HUGO.gene.symbol == "ESR1"), ]
X_SSLB <- out$X
K_SSLB <- out$K
B_SSLB <- out$B
B_SSLB = B_SSLB[, union(c(1, 2, 10, 5), 1:K_SSLB)]
X_SSLB = X_SSLB[, union(c(1, 2, 10, 5), 1:K_SSLB)]
X_SSLB[X_SSLB > 5] = 5
X_SSLB[X_SSLB < -5] = -5
plot_matrix(X_SSLB)
B_SSLB = B_SSLB[, order(p_vals)]
X_SSLB = X_SSLB[, order(p_vals)]
X_SSLB <- out$X
K_SSLB <- out$K
B_SSLB <- out$B
# significant difference
p_vals <- numeric(K_SSLB)
for (k in 1:K_SSLB) {
p_vals[k] <- wilcox.test(X_SSLB[, k] ~ er_factor)$p.value
}
er_k <- which.min(p_vals)
p_vals < 0.01/K_SSLB
B_SSLB = B_SSLB[, order(p_vals)]
X_SSLB = X_SSLB[, order(p_vals)]
X_SSLB = X_SSLB[, union(c(1, 2, 10, 5), 1:K_SSLB)]
B_SSLB = B_SSLB[, union(c(1, 2, 10, 5), 1:K_SSLB)]
plot_matrix(X_SSLB[er_order,])
X_SSLB[X_SSLB > 5]=5
X_SSLB[X_SSLB < -5]=-5
plot_matrix(X_SSLB[er_order,])
# which biclusters contain ESR1
B_SSLB[which(gene_info$HUGO.gene.symbol == "ESR1"), ]
# HER2 markers
B_SSLB[which(gene_info$HUGO.gene.symbol == "ERBB2"), ]
out$path$K
plot_matrix(out$path$Gamma_tilde[[11]][er_order,])
#  Testing further gene markers (ZMZ14) --------------------------------
# luminal A (ER+, HER2-)
markers <- c("KRT8", "FOXA1", "XBP1", "GATA3", "ADH1B")
B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), ]
in_bic <- B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), 1]
found <- sum(in_bic != 0)
tot <- length(markers)
n_bic <- sum(B_SSLB[,1] != 0)
mat <- matrix(c(found, tot - found, n_bic - found, G - tot - (n_bic - found)), 2, 2)
fisher.test(mat)
# luminal B (ER+, HER2+)
markers <- c("KRT8", "FGFR1", "EGFR", "CCNE1","CCNB1", "MYBL2")
B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), ]
# ER-/HER2+
markers <- c("GRB7")
B_SSLB[which(gene_info$HUGO.gene.symbol == "GRB7"), ]
# basal-like (ER-, HER2-)
markers <- c("KRT5", "KRT14", "KRT17", "EGFR", "KIT", "FOXC1", "CDH3", "VIM")
B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), ]
time/60
time
time/3600
